package com.flipkart.krystal.caramel.samples.basic.classification;

import com.flipkart.krystal.caramel.model.AccessBeforeInitializationException;
import com.flipkart.krystal.caramel.model.Field;
import com.flipkart.krystal.caramel.model.SimpleField;
import com.flipkart.krystal.caramel.model.Value;
import com.flipkart.krystal.caramel.model.ValueImpl;
import com.flipkart.krystal.caramel.samples.basic.TransformedProduct;

// Auto Generated by Caramel
public class TransformedProductPayload implements TransformedProductPayloadDefinition {

  interface TransformedProductPayloadFields {

    Field<TransformedProduct, TransformedProductPayload> initialTransformedProduct =
        new SimpleField<>(
            "initialTransformedProduct",
            TransformedProductPayload.class,
            TransformedProductPayload::getInitialTransformedProduct,
            TransformedProductPayload::setInitialTransformedProduct);

    Field<String, TransformedProductPayload> x2String =
        new SimpleField<>(
            "x2String",
            TransformedProductPayload.class,
            TransformedProductPayload::getX2String,
            TransformedProductPayload::setX2String);

    Field<TransformedProduct, TransformedProductPayload> finalTransformedProduct =
        new SimpleField<>(
            "finalTransformedProduct",
            TransformedProductPayload.class,
            TransformedProductPayload::getFinalTransformedProduct,
            TransformedProductPayload::setFinalTransformedProduct);
  }

  private final Value<TransformedProduct, TransformedProductPayload> initialTransformedProduct =
      new ValueImpl<>(TransformedProductPayloadFields.initialTransformedProduct, this);
  private final Value<String, TransformedProductPayload> x2String =
      new ValueImpl<>(TransformedProductPayloadFields.x2String, this);
  private final Value<TransformedProduct, TransformedProductPayload> finalTransformedProduct =
      new ValueImpl<>(TransformedProductPayloadFields.finalTransformedProduct, this);

  @Override
  public TransformedProduct getInitialTransformedProduct() {
    return initialTransformedProduct
        .get()
        .orElseThrow(() -> new AccessBeforeInitializationException(initialTransformedProduct));
  }

  public void setInitialTransformedProduct(TransformedProduct transformedProduct) {
    initialTransformedProduct.set(transformedProduct);
  }

  @Override
  public String getX2String() {
    return x2String.get().orElseThrow(() -> new AccessBeforeInitializationException(x2String));
  }

  public void setX2String(String string) {
    x2String.set(string);
  }

  @Override
  public TransformedProduct getFinalTransformedProduct() {
    return finalTransformedProduct
        .get()
        .orElseThrow(() -> new AccessBeforeInitializationException(finalTransformedProduct));
  }

  public void setFinalTransformedProduct(TransformedProduct transformedProduct) {}
}
