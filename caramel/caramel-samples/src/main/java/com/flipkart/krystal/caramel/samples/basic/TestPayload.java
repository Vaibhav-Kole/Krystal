package com.flipkart.krystal.caramel.samples.basic;

import com.flipkart.krystal.caramel.model.AccessBeforeInitializationException;
import com.flipkart.krystal.caramel.model.Field;
import com.flipkart.krystal.caramel.model.SimpleField;
import com.flipkart.krystal.caramel.model.Value;
import com.flipkart.krystal.caramel.model.ValueImpl;
import java.util.Collection;
import java.util.List;

// AutoGenerated and managed by Caramel
final class TestPayload implements TestPayloadDefinition {

  interface TestPayloadFields {

    Field<String, TestPayload> x1String =
        new SimpleField<>(
            "x1String", TestPayload.class, TestPayload::x1String, TestPayload::setX1String);
    Field<ProductUpdateEventsContainer, TestPayload> productUpdateEvents =
        new SimpleField<>(
            "productUpdateEvents",
            TestPayload.class,
            TestPayload::productUpdateEvents,
            TestPayload::setProductUpdateEvents);
    Field<TransformedProduct, TestPayload> initialTransformedProduct =
        new SimpleField<>(
            "initialTransformedProduct",
            TestPayload.class,
            TestPayload::initialTransformedProduct,
            TestPayload::setInitialTransformedProduct);
    Field<ProductUpdateEvent, TestPayload> initProductEvent =
        new SimpleField<>(
            "initProductEvent",
            TestPayload.class,
            TestPayload::initProductEvent,
            TestPayload::setInitProductEvent);
    Field<List<TransformedProduct>, TestPayload> conditionalTransformedProducts =
        new SimpleField<>(
            "conditionalTransformedProducts",
            TestPayload.class,
            TestPayload::conditionalTransformedProducts,
            TestPayload::setConditionalTransformedProducts);
    Field<String, TestPayload> triggerUserId =
        new SimpleField<>(
            "triggerUserId",
            TestPayload.class,
            TestPayload::triggerUserId,
            TestPayload::setTriggerUserId);

    Field<Collection<Metric>, TestPayload> metrics =
        new SimpleField<>(
            "metrics", TestPayload.class, TestPayload::metrics, TestPayload::setMetrics);

    Field<Collection<String>, TestPayload> metricNames =
        new SimpleField<>(
            "metricNames",
            TestPayload.class,
            TestPayload::metricNames,
            TestPayload::setMetricNames);

    Field<Boolean, TestPayload> isEnableValidation =
        new SimpleField<>(
            "isEnableValidation",
            TestPayload.class,
            TestPayload::isEnableValidation,
            TestPayload::setIsEnableValidation);
    Field<String, TestPayload> string =
        new SimpleField<>("string", TestPayload.class, TestPayload::string, TestPayload::setString);

    Field<String, TestPayload> secondString =
        new SimpleField<>(
            "secondString",
            TestPayload.class,
            TestPayload::secondString,
            TestPayload::setSecondString);
    Field<TransformedProduct, TestPayload> nextProduct =
        new SimpleField<>(
            "nextProduct",
            TestPayload.class,
            TestPayload::nextProduct,
            TestPayload::setNextProduct);
  }

  private final Value<String, TestPayload> x1String =
      new ValueImpl<>(TestPayloadFields.x1String, this);
  private final Value<ProductUpdateEventsContainer, TestPayload> productUpdateEvents =
      new ValueImpl<>(TestPayloadFields.productUpdateEvents, this);
  private final Value<TransformedProduct, TestPayload> initialTransformedProduct =
      new ValueImpl<>(TestPayloadFields.initialTransformedProduct, this);
  private final Value<ProductUpdateEvent, TestPayload> initProductEvent =
      new ValueImpl<>(TestPayloadFields.initProductEvent, this);
  private final Value<List<TransformedProduct>, TestPayload> conditionalTransformedProducts =
      new ValueImpl<>(TestPayloadFields.conditionalTransformedProducts, this);
  private final Value<String, TestPayload> triggerUserId =
      new ValueImpl<>(TestPayloadFields.triggerUserId, this);
  private final Value<Collection<Metric>, TestPayload> metrics =
      new ValueImpl<>(TestPayloadFields.metrics, this);
  private final Value<Collection<String>, TestPayload> metricNames =
      new ValueImpl<>(TestPayloadFields.metricNames, this);
  private final Value<Boolean, TestPayload> isEnableValidation =
      new ValueImpl<>(TestPayloadFields.isEnableValidation, this);
  private final Value<String, TestPayload> string = new ValueImpl<>(TestPayloadFields.string, this);
  private final Value<String, TestPayload> secondString =
      new ValueImpl<>(TestPayloadFields.secondString, this);
  private final Value<TransformedProduct, TestPayload> nextProduct =
      new ValueImpl<>(TestPayloadFields.nextProduct, this);

  public String x1String() {
    return x1String.get().orElseThrow();
  }

  public void setX1String(String string) {
    x1String.set(string);
  }

  @Override
  public ProductUpdateEventsContainer productUpdateEvents() {
    return productUpdateEvents.get().orElseThrow();
  }

  public void setProductUpdateEvents(ProductUpdateEventsContainer productUpdateEvents) {
    this.productUpdateEvents.set(productUpdateEvents);
  }

  @Override
  public TransformedProduct initialTransformedProduct() {
    return initialTransformedProduct.get().orElseThrow();
  }

  public void setInitialTransformedProduct(TransformedProduct transformedProduct) {
    this.initialTransformedProduct.set(transformedProduct);
  }

  @Override
  public ProductUpdateEvent initProductEvent() {
    return initProductEvent.get().orElseThrow();
  }

  public void setInitProductEvent(ProductUpdateEvent productEvent) {
    this.initProductEvent.set(productEvent);
  }

  public List<TransformedProduct> conditionalTransformedProducts() {
    return conditionalTransformedProducts.get().orElseThrow();
  }

  public void setConditionalTransformedProducts(List<TransformedProduct> transformedProducts) {
    this.conditionalTransformedProducts.set(transformedProducts);
  }

  @Override
  public String triggerUserId() {
    return triggerUserId
        .get()
        .orElseThrow(() -> new AccessBeforeInitializationException(triggerUserId));
  }

  public void setTriggerUserId(String triggerUserId) {
    this.triggerUserId.set(triggerUserId);
  }

  @Override
  public Collection<Metric> metrics() {
    return metrics.getOrThrow();
  }

  public void setMetrics(Collection<Metric> metrics) {
    this.metrics.set(metrics);
  }

  @Override
  public Collection<String> metricNames() {
    return metricNames.getOrThrow();
  }

  public void setMetricNames(Collection<String> metrics) {
    this.metricNames.set(metrics);
  }

  @Override
  public boolean isEnableValidation() {
    return isEnableValidation.getOrThrow();
  }

  public void setIsEnableValidation(boolean isEnableValidation) {
    this.isEnableValidation.set(isEnableValidation);
  }

  @Override
  public String string() {
    return string.getOrThrow();
  }

  public void setString(String s) {
    string.set(s);
  }

  @Override
  public String secondString() {
    return secondString.getOrThrow();
  }

  public void setSecondString(String s) {
    secondString.set(s);
  }

  @Override
  public TransformedProduct nextProduct() {
    return nextProduct.getOrThrow();
  }

  public void setNextProduct(TransformedProduct transformedProduct) {
    this.nextProduct.set(transformedProduct);
  }
}
